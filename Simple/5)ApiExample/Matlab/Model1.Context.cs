//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Matlab
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MatlabEntities : DbContext
    {
        public MatlabEntities()
            : base("name=MatlabEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<FFTValues> FFTValues { get; set; }
        public virtual DbSet<TimeValues> TimeValues { get; set; }
        public virtual DbSet<Words> Words { get; set; }
    
        public virtual ObjectResult<SelectFFTValue_Result> SelectFFTValue(Nullable<double> s, Nullable<double> k, Nullable<double> nF, string timeValue)
        {
            var sParameter = s.HasValue ?
                new ObjectParameter("S", s) :
                new ObjectParameter("S", typeof(double));
    
            var kParameter = k.HasValue ?
                new ObjectParameter("K", k) :
                new ObjectParameter("K", typeof(double));
    
            var nFParameter = nF.HasValue ?
                new ObjectParameter("NF", nF) :
                new ObjectParameter("NF", typeof(double));
    
            var timeValueParameter = timeValue != null ?
                new ObjectParameter("TimeValue", timeValue) :
                new ObjectParameter("TimeValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectFFTValue_Result>("SelectFFTValue", sParameter, kParameter, nFParameter, timeValueParameter);
        }
    
        public virtual ObjectResult<SelectTimeValue_Result> SelectTimeValue(Nullable<double> s, Nullable<double> k, Nullable<double> nF, Nullable<double> lenght)
        {
            var sParameter = s.HasValue ?
                new ObjectParameter("S", s) :
                new ObjectParameter("S", typeof(double));
    
            var kParameter = k.HasValue ?
                new ObjectParameter("K", k) :
                new ObjectParameter("K", typeof(double));
    
            var nFParameter = nF.HasValue ?
                new ObjectParameter("NF", nF) :
                new ObjectParameter("NF", typeof(double));
    
            var lenghtParameter = lenght.HasValue ?
                new ObjectParameter("Lenght", lenght) :
                new ObjectParameter("Lenght", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectTimeValue_Result>("SelectTimeValue", sParameter, kParameter, nFParameter, lenghtParameter);
        }
    
        public virtual ObjectResult<string> UpdateFFTValue(string ru, Nullable<double> smin, Nullable<double> smax, Nullable<double> sround, Nullable<double> kmin, Nullable<double> kmax, Nullable<double> kround, Nullable<double> nFmin, Nullable<double> nFmax, Nullable<double> nFround)
        {
            var ruParameter = ru != null ?
                new ObjectParameter("Ru", ru) :
                new ObjectParameter("Ru", typeof(string));
    
            var sminParameter = smin.HasValue ?
                new ObjectParameter("Smin", smin) :
                new ObjectParameter("Smin", typeof(double));
    
            var smaxParameter = smax.HasValue ?
                new ObjectParameter("Smax", smax) :
                new ObjectParameter("Smax", typeof(double));
    
            var sroundParameter = sround.HasValue ?
                new ObjectParameter("Sround", sround) :
                new ObjectParameter("Sround", typeof(double));
    
            var kminParameter = kmin.HasValue ?
                new ObjectParameter("Kmin", kmin) :
                new ObjectParameter("Kmin", typeof(double));
    
            var kmaxParameter = kmax.HasValue ?
                new ObjectParameter("Kmax", kmax) :
                new ObjectParameter("Kmax", typeof(double));
    
            var kroundParameter = kround.HasValue ?
                new ObjectParameter("Kround", kround) :
                new ObjectParameter("Kround", typeof(double));
    
            var nFminParameter = nFmin.HasValue ?
                new ObjectParameter("NFmin", nFmin) :
                new ObjectParameter("NFmin", typeof(double));
    
            var nFmaxParameter = nFmax.HasValue ?
                new ObjectParameter("NFmax", nFmax) :
                new ObjectParameter("NFmax", typeof(double));
    
            var nFroundParameter = nFround.HasValue ?
                new ObjectParameter("NFround", nFround) :
                new ObjectParameter("NFround", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UpdateFFTValue", ruParameter, sminParameter, smaxParameter, sroundParameter, kminParameter, kmaxParameter, kroundParameter, nFminParameter, nFmaxParameter, nFroundParameter);
        }
    
        public virtual ObjectResult<string> UpdateTimeValue(string ru, Nullable<double> smin, Nullable<double> smax, Nullable<double> sround, Nullable<double> kmin, Nullable<double> kmax, Nullable<double> kround, Nullable<double> nFmin, Nullable<double> nFmax, Nullable<double> nFround, Nullable<double> timemin, Nullable<double> timemax, Nullable<double> timeround)
        {
            var ruParameter = ru != null ?
                new ObjectParameter("Ru", ru) :
                new ObjectParameter("Ru", typeof(string));
    
            var sminParameter = smin.HasValue ?
                new ObjectParameter("Smin", smin) :
                new ObjectParameter("Smin", typeof(double));
    
            var smaxParameter = smax.HasValue ?
                new ObjectParameter("Smax", smax) :
                new ObjectParameter("Smax", typeof(double));
    
            var sroundParameter = sround.HasValue ?
                new ObjectParameter("Sround", sround) :
                new ObjectParameter("Sround", typeof(double));
    
            var kminParameter = kmin.HasValue ?
                new ObjectParameter("Kmin", kmin) :
                new ObjectParameter("Kmin", typeof(double));
    
            var kmaxParameter = kmax.HasValue ?
                new ObjectParameter("Kmax", kmax) :
                new ObjectParameter("Kmax", typeof(double));
    
            var kroundParameter = kround.HasValue ?
                new ObjectParameter("Kround", kround) :
                new ObjectParameter("Kround", typeof(double));
    
            var nFminParameter = nFmin.HasValue ?
                new ObjectParameter("NFmin", nFmin) :
                new ObjectParameter("NFmin", typeof(double));
    
            var nFmaxParameter = nFmax.HasValue ?
                new ObjectParameter("NFmax", nFmax) :
                new ObjectParameter("NFmax", typeof(double));
    
            var nFroundParameter = nFround.HasValue ?
                new ObjectParameter("NFround", nFround) :
                new ObjectParameter("NFround", typeof(double));
    
            var timeminParameter = timemin.HasValue ?
                new ObjectParameter("Timemin", timemin) :
                new ObjectParameter("Timemin", typeof(double));
    
            var timemaxParameter = timemax.HasValue ?
                new ObjectParameter("Timemax", timemax) :
                new ObjectParameter("Timemax", typeof(double));
    
            var timeroundParameter = timeround.HasValue ?
                new ObjectParameter("Timeround", timeround) :
                new ObjectParameter("Timeround", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UpdateTimeValue", ruParameter, sminParameter, smaxParameter, sroundParameter, kminParameter, kmaxParameter, kroundParameter, nFminParameter, nFmaxParameter, nFroundParameter, timeminParameter, timemaxParameter, timeroundParameter);
        }
    }
}
